//  https://www.cnblogs.com/prayer521/p/4122751.html

c语言中enum类型的用法
11.10 枚举类型

在实际问题中，有些变量的取值被限定在一个有限的范围内。例如，一个星期内只有七天，一年只有十二个月等。如果把这些量说明为整型，字符型或其它类型显然是不妥当的。为此，C语言提供了一种称为“枚举”的类型。在“枚举”类型的定义中列举出所有可能的取值，被声明为“枚举”类型的变量取值不能超过定义的范围。
应该说明的是，枚举类型是一种基本数据类型，而不是一种构造类型，因为它不能再分解为任何基本类型。

11.10.1 枚举类型的定义和枚举变量的说明
1. 枚举的定义
枚举类型定义的一般形式为：enum 枚举名{ 枚举值表 };
在枚举值表中应罗列出所有可用值。这些值也称为枚举元素。

例如：该枚举名为weekday，枚举值共有7个，即一周中的七天。凡被说明为weekday类型变量的取值只能是七天中的某一天。

2. 枚举变量的说明
如同结构和联合一样，枚举变量也可用不同的方式说明，即先定义后说明，同时定义说明或直接说明。
设有变量a,b,c被说明为上述的weekday，可采用下述任一种方式：

enum weekday{ sun,mou,tue,wed,thu,fri,sat };
enum weekday a,b,c;
或者为： enum weekday{ sun,mou,tue,wed,thu,fri,sat }a,b,c;
或者为： enum { sun,mou,tue,wed,thu,fri,sat }a,b,c;

11.10.2 枚举类型变量的赋值和使用

枚举类型在使用中有以下规定：
1. 枚举值是常量，不是变量。不能在程序中用赋值语句再对它赋值。 例如对枚举weekday的元素再作以下赋值： sun=5; mon=2; sun=mon; 都是错误的。
2. 枚举元素本身由系统定义了一个表示序号的数值，从0开始顺序定义为0，1，2…。如在weekday中，sun值为0，mon值为1，…,sat值为6。

【例11.10】
main(){
enum weekday
{ sun,mon,tue,wed,thu,fri,sat } a,b,c;
a=sun;
b=mon;
c=tue;
printf("%d,%d,%d",a,b,c);
}

说明： 只能把枚举值赋予枚举变量，不能把元素的数值直接赋予枚举变量。如：
a=sum;
b=mon;
是正确的。而：
a=0;
b=1;
是错误的。如一定要把数值赋予枚举变量，则必须用强制类型转换。 如：
a=(enum weekday)2;
其意义是将顺序号为2的枚举元素赋予枚举变量a，相当于：
a=tue; 还应该说明的是枚举元素不是字符常量也不是字符串常量，使用时不要加单、双引号。

【例11.11】
main(){
enum body
{ a,b,c,d } month[31],j;
int i;
j=a;
for(i=1;i<=30;i++){
month[i]=j;
j++;
if (j>d) j=a;
}
for(i=1;i<=30;i++){
switch(month[i])
{
case a:printf(" %2d %c\t",i,'a'); break;
case b:printf(" %2d %c\t",i,'b'); break;
case c:printf(" %2d %c\t",i,'c'); break;
case d:printf(" %2d %c\t",i,'d'); break;
default:break;
}
}
printf("\n");
}




==========================================================================
https://www.cnblogs.com/LubinLew/p/struct_enum_union_in_cpp.html


C++对C语言的结构、联合、枚举 这3种数据类型进行了扩展。

1、C++定义的结构名、联合名、枚举名 都是 类型名，可以直接用于变量的声明或定义。即在C++中定义变量时不必在结构名、联合名、枚举名 前加上前缀struct、union、enum。
例如有如下头文件(head.h)

//head.h
enum color {red,blak,white,blue,yellow};
struct student {char name[6]; int age; int num;};
union score {int i_sc; float f_sc;}; 

在C中使用的使用的方法
#include "head.h"
int main(void)
{
    enum color en_col;
    struct student st_stu;
    union score un_sc;
    
    //....
    return 0;
}

在C++中使用的使用的方法
#include "head.h"
int main(void)
{
    color en_col;
    student st_stu;
    score un_sc;
    
    //....
    return 0;
}

在C语言中定义这3种变量显得很麻烦,在C中通常使用typedef来达到和C++一样的效果
//example.c
typedef enum _color {red,blak,white,blue,yellow}color;
typedef struct _student {char name[6]; int age; int num;}student; 
typedef union _score {int i_sc; float f_sc;} score;

int main(void)
{
    color en_col;
    student st_stu;
    score un_sc;
    
    //....
    return 0;
}
 

2、C++中的结构体 和 联合体 中可以定义函数。
下面是一个简单的例子

//example2.cpp
#include <iostream>
using namespace std;

struct student 
{
    char name[6]; 
    int age; 
    char* GetName(void){return name;};
    int GetAge(void){return age;};
};

union score 
{
    int i_sc; 
    float f_sc;
    int GetInt(void){return i_sc;};
    float GetFloat(void){return f_sc;};
}; 

int main(void)
{
    student st_stu = {"Lubin", 27};
    score un_sc = {100};
    
    cout << st_stu.GetName() << endl;
    cout << st_stu.GetAge() << endl;
    cout << un_sc.GetInt() << endl;

    return 0;
}
/* 输出结果
Lubin
27
100
*/

 2.1 C++中struct 和 class 的区别
 在C++中struct也是一种类,他与class具有相同的功能,用法完全相同。
唯一的区别就是：在没有指定成员的访问权限时，struct中默认为public权限，class中默认为private权限。

2.2 C++中的 union 和 class 的区别
union可以定义自己的函数，包括 constructor 以及 destructor。
union支持 public , protected 以及 private 权限。

读者看到这可能会问，要是这样的话，union与class还有什么区别吗？区别当然还是有的
1. union不支持继承。也就是说，union既不能有父类，也不能作为别人的父类。
2. union中不能定义虚函数。
3.在没有指定成员的访问权限时,union中默认为public权限
4.union中的成员类型比class少,具体见2.2.1节

2.2.1 C++中的 union 不能存放的成员类型
联合里面的东西共享内存，所以静态、引用都不能用，因为他们不可能共享内存。
不是所有类都能作为union的成员变量,如果一个类，包括其父类，含有自定义的constructor，copy constructor，destructor，copy assignment operator(拷贝赋值运算符), virtual function中的任意一个，
那么这种类型的变量不能作为union的成员变量,因为他们共享内存，编译器无法保证这些对象不被破坏，也无法保证离开时调用析够函数。

2.2.2 C++中的 union 的匿名联合(屠龙之术 - 一辈子都可能不会用到)
如果我们在定义union的时候没有定义名字，那么这个union被称为匿名union(anonymous union)。
匿名联合仅仅通知编译器它的成员变量共同享一个地址,并且变量本身是直接引用的,不使用通常的点号运算符语法.

匿名union的特点如下：
1. 匿名union中不能定义static变量。
2. 匿名union中不能定义函数。
3. 匿名union中不支持 protected 以及 private 权限。
4. 在全局域以及namespace中定义的匿名union只能是static的,否则必须放在匿名名字空间中。

2. 共用体和结构体的区别
　　共用体和结构体有下列区别:
　　1. 共用体和结构体都是由多个不同的数据类型成员组成,
　　但在任何同一时刻, 共用体只存放了一个被选中的成员, 而结构体的所有成员都存在。
　　2. 对于共用体的不同成员赋值, 将会对其它成员重写, 原来成员的值就不存在了,
　　而对于结构体的不同成员赋值是互不影响的。 另外要注意的是，
　　union的成员不可以为静态、参考，如果是自定义类型的话，
　　该自定义类型成员不可以有构造函数、析构函数或是复制指定运算子。
-------------------------------------------------------------------------------------------------------------------------------------------------------------

参考资料:
<<C++面向对象程序设计(第二版)>>
http://blog.csdn.net/marrco2005/article/details/1657160
http://zwkufo.blog.163.com/blog/static/25882512010729101816347/
http://blog.csdn.net/syhhl007/article/details/4678786





==========================================================================
https://www.cnblogs.com/biyeymyhjob/archive/2012/09/07/2674992.html

struct/class/union内存对齐原则有四个：
1).数据成员对齐规则：结构(struct)(或联合(union))的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置要从该成员大小或者成员的子成员大小（只要该成员有子成员，比如说是数组，结构体等）的整数倍开始(比如int在３２位机为４字节, 则要从４的整数倍地址开始存储),基本类型不包括struct/class/uinon。
2).结构体作为成员:如果一个结构里有某些结构体成员,则结构体成员要从其内部"最宽基本类型成员"的整数倍地址开始存储.(struct a里存有struct b,b里有char,int ,double等元素,那b应该从8的整数倍开始存储.)。
3).收尾工作:结构体的总大小,也就是sizeof的结果,.必须是其内部最大成员的"最宽基本类型成员"的整数倍.不足的要补齐.(基本类型不包括struct/class/uinon)。
4).sizeof(union)，以结构里面size最大元素为union的size,因为在某一时刻，union只有一个成员真正存储于该地址。

 






==========================================================================
https://www.cnblogs.com/younes/archive/2009/11/11/1601223.html



C/C++中的联合 union
联合(union)在C/C++里面见得并不多，但是在一些对内存要求特别严格的地方，联合又是频繁出现，那么究竟什么是联合、怎么去用、有什么需要注意的地方呢？就这些问题，我试着做一些简单的回答，里面肯定还有不当的地方，欢迎指出！ 

1、什么是联合？ 
   “联合”是一种特殊的类，也是一种构造类型的数据结构。 在一个“联合”内可以定义多种不同的数据类型， 一个被说明为该“联合”类型的变量中，允许装入该“联合”所定义的任何一种数据，这些数据共享同一段内存，已达到节省空间的目的（还有一个节省空间的类型：位域）。 这是一个非常特殊的地方，也是联合的特征。另外，同struct一样，联合默认访问权限也是公有的，并且，也具有成员函数。 

2、联合与结构的区别？ 
   “联合”与“结构”有一些相似之处。但两者有本质上的不同。在结构中各成员有各自的内存空间， 一个结构变量的总长度是各成员长度之和（空结构除外，同时不考虑边界调整）。而在“联合”中，各成员共享一段内存空间， 一个联合变量的长度等于各成员中最长的长度。应该说明的是， 这里所谓的共享不是指把多个成员同时装入一个联合变量内， 而是指该联合变量可被赋予任一成员值，但每次只能赋一种值， 赋入新值则冲去旧值。 












